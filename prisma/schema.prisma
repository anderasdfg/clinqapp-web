// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// CORE: ORGANIZATIONS & USERS
// ============================================

enum OrganizationSpecialty {
  PODIATRY
  DENTISTRY
  AESTHETICS
  GENERAL
}

enum SubscriptionPlan {
  FREE_TRIAL
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
}

model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  // Basic info
  name        String
  slug        String  @unique // para URLs amigables
  email       String
  phone       String?
  address     String?
  website     String?
  
  // Social media
  instagramUrl String? @map("instagram_url")
  facebookUrl  String? @map("facebook_url")
  tiktokUrl    String? @map("tiktok_url")
  linkedinUrl  String? @map("linkedin_url")
  
  // Branding
  logoUrl       String? @map("logo_url")
  primaryColor  String? @map("primary_color") @default("#2563eb")
  secondaryColor String? @map("secondary_color") @default("#7c3aed")
  
  // Business
  specialty OrganizationSpecialty @default(PODIATRY)
  
  // Subscription
  subscriptionPlan   SubscriptionPlan   @default(FREE_TRIAL) @map("subscription_plan")
  subscriptionStatus SubscriptionStatus @default(TRIALING) @map("subscription_status")
  trialEndsAt        DateTime?          @map("trial_ends_at") @db.Timestamptz
  subscriptionEndsAt DateTime?          @map("subscription_ends_at") @db.Timestamptz
  
  // Relations
  users        User[]
  patients     Patient[]
  services     Service[]
  appointments Appointment[]
  payments     Payment[]
  coupons      Coupon[]
  schedules    Schedule[]

  @@map("organizations")
}

enum UserRole {
  OWNER        // Super admin del centro
  PROFESSIONAL // Médico/Podólogo/etc
  RECEPTIONIST // Recepcionista
  PATIENT      // Paciente (para futuro portal de pacientes)
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  // Auth (vinculado con Supabase Auth)
  authId String @unique @map("auth_id") @db.Uuid // Supabase auth.users.id
  
  // Basic info
  email     String  @unique
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  dni       String? @unique // CAMBIADO: ahora es único
  phone     String?
  avatarUrl String? @map("avatar_url")
  
  // Organization membership
  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           UserRole
  
  // Professional specific
  licenseNumber String? @map("license_number") // Número de colegiatura
  specialty     String? // Especialidad dentro del rubro
  
  // Email verification (Supabase maneja esto, pero lo guardamos por referencia)
  emailVerified Boolean @default(false) @map("email_verified")
  
  // Relations
  assignedPatients   Patient[]     @relation("AssignedProfessional")
  appointments       Appointment[] @relation("AppointmentProfessional")
  treatments         Treatment[]   @relation("TreatmentProfessional")
  paymentCollections Payment[]     @relation("PaymentCollectedBy")

  @@map("users")
  @@index([organizationId])
  @@index([authId])
  @@index([email])
  @@index([dni])
}

// ============================================
// SCHEDULES (Horarios de atención)
// ============================================

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Schedule {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  dayOfWeek DayOfWeek @map("day_of_week")
  startTime String    @map("start_time") // "09:00"
  endTime   String    @map("end_time")   // "18:00"
  enabled   Boolean   @default(true)

  @@map("schedules")
  @@unique([organizationId, dayOfWeek])
}

// ============================================
// PATIENTS
// ============================================

enum ReferralSource {
  WEBSITE
  INSTAGRAM
  TIKTOK
  FACEBOOK
  GOOGLE
  WORD_OF_MOUTH
  OTHER
}

model Patient {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  // Organization
  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Assigned professional (profesional principal)
  assignedProfessionalId String? @map("assigned_professional_id") @db.Uuid
  assignedProfessional   User?   @relation("AssignedProfessional", fields: [assignedProfessionalId], references: [id], onDelete: SetNull)
  
  // Personal info (OBLIGATORIO)
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  dni       String? @unique // Puede ser null para extranjeros
  phone     String
  email     String?
  
  // Additional info (OPCIONAL)
  dateOfBirth       DateTime? @map("date_of_birth") @db.Date
  gender            String?
  address           String?
  occupation        String?
  emergencyContact  String?   @map("emergency_contact")
  emergencyPhone    String?   @map("emergency_phone")
  
  // Marketing
  referralSource ReferralSource @default(OTHER) @map("referral_source")
  
  // Medical history (OPCIONAL - específico por especialidad)
  medicalHistory Json? @map("medical_history") @db.JsonB
  // Ejemplo estructura:
  // {
  //   "allergies": ["penicilina", "latex"],
  //   "medications": ["aspirina 100mg"],
  //   "chronic_conditions": ["diabetes tipo 2"],
  //   "previous_surgeries": ["apendicectomía 2019"],
  //   "specialty_notes": {} // campos específicos por especialidad
  // }
  
  // Relations
  appointments Appointment[]
  treatments   Treatment[]
  payments     Payment[]

  @@map("patients")
  @@index([organizationId])
  @@index([assignedProfessionalId])
  @@index([deletedAt])
}

// ============================================
// SERVICES (Tipos de tratamiento/servicio)
// ============================================

model Service {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  name           String
  description    String?
  basePrice      Decimal  @map("base_price") @db.Decimal(10, 2)
  duration       Int      // en minutos
  requiresSessions Boolean @default(false) @map("requires_sessions")
  defaultSessions  Int?    @default(1) @map("default_sessions")
  isActive       Boolean  @default(true) @map("is_active")
  
  // Relations
  appointments Appointment[]
  treatments   Treatment[]

  @@map("services")
  @@index([organizationId])
}

// ============================================
// APPOINTMENTS (Citas)
// ============================================

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

model Appointment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  // Organization
  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Patient
  patientId String  @map("patient_id") @db.Uuid
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Professional (quien atiende)
  professionalId String @map("professional_id") @db.Uuid
  professional   User   @relation("AppointmentProfessional", fields: [professionalId], references: [id], onDelete: Restrict)
  
  // Service
  serviceId String?  @map("service_id") @db.Uuid
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  
  // Treatment relation (si es parte de un tratamiento)
  treatmentId String?    @map("treatment_id") @db.Uuid
  treatment   Treatment? @relation(fields: [treatmentId], references: [id], onDelete: SetNull)
  sessionNumber Int?     @map("session_number") // Número de sesión dentro del tratamiento
  
  // Appointment details
  startTime DateTime      @map("start_time") @db.Timestamptz
  endTime   DateTime      @map("end_time") @db.Timestamptz
  status    AppointmentStatus @default(PENDING)
  
  // Notes
  notes           String?
  clinicalNotes   String? @map("clinical_notes") // Notas clínicas post-consulta
  cancellationReason String? @map("cancellation_reason")
  
  // Reminder sent
  reminderSentAt DateTime? @map("reminder_sent_at") @db.Timestamptz
  
  // Relations
  payment Payment?

  @@map("appointments")
  @@index([organizationId])
  @@index([patientId])
  @@index([professionalId])
  @@index([startTime])
  @@index([status])
}

// ============================================
// TREATMENTS (Tratamientos con múltiples sesiones)
// ============================================

enum TreatmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

model Treatment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  // Patient
  patientId String  @map("patient_id") @db.Uuid
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Professional
  professionalId String @map("professional_id") @db.Uuid
  professional   User   @relation("TreatmentProfessional", fields: [professionalId], references: [id], onDelete: Restrict)
  
  // Service
  serviceId String  @map("service_id") @db.Uuid
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  
  // Treatment details
  name              String
  description       String?
  totalSessions     Int     @map("total_sessions")
  completedSessions Int     @default(0) @map("completed_sessions")
  status            TreatmentStatus @default(ACTIVE)
  
  // Diagnosis & Plan
  diagnosis         String?
  treatmentPlan     String? @map("treatment_plan")
  
  // Relations
  appointments Appointment[]
  images       TreatmentImage[]

  @@map("treatments")
  @@index([patientId])
  @@index([professionalId])
  @@index([status])
}

// ============================================
// TREATMENT IMAGES (Evidencia clínica)
// ============================================

enum ImageCategory {
  BEFORE
  DURING
  AFTER
  OTHER
}

model TreatmentImage {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  treatmentId String    @map("treatment_id") @db.Uuid
  treatment   Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  
  imageUrl    String    @map("image_url") // URL en Supabase Storage
  category    ImageCategory @default(OTHER)
  description String?
  takenAt     DateTime  @default(now()) @map("taken_at") @db.Timestamptz

  @@map("treatment_images")
  @@index([treatmentId])
}

// ============================================
// PAYMENTS
// ============================================

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  YAPE
  PLIN
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Organization
  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Patient
  patientId String  @map("patient_id") @db.Uuid
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Appointment (optional)
  appointmentId String?      @unique @map("appointment_id") @db.Uuid
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  
  // Payment details
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(COMPLETED)
  
  // Discount/Coupon
  couponId      String?  @map("coupon_id") @db.Uuid
  coupon        Coupon?  @relation(fields: [couponId], references: [id], onDelete: SetNull)
  discountAmount Decimal? @map("discount_amount") @db.Decimal(10, 2)
  
  // Receipt
  receiptNumber String? @unique @map("receipt_number")
  receiptUrl    String? @map("receipt_url")
  
  // Collected by
  collectedById String? @map("collected_by_id") @db.Uuid
  collectedBy   User?   @relation("PaymentCollectedBy", fields: [collectedById], references: [id], onDelete: SetNull)
  
  // Culqi integration
  culqiChargeId String? @unique @map("culqi_charge_id")
  
  notes String?

  @@map("payments")
  @@index([organizationId])
  @@index([patientId])
  @@index([createdAt])
  @@index([status])
}

// ============================================
// COUPONS (Cupones de descuento)
// ============================================

enum CouponType {
  PERCENTAGE
  FIXED
}

model Coupon {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  code      String     @unique
  type      CouponType
  value     Decimal    @db.Decimal(10, 2) // 20 para 20% o S/20
  
  validFrom  DateTime  @map("valid_from") @db.Timestamptz
  validUntil DateTime  @map("valid_until") @db.Timestamptz
  
  maxUses       Int      @map("max_uses")
  currentUses   Int      @default(0) @map("current_uses")
  
  isActive      Boolean  @default(true) @map("is_active")
  
  // Applicable services (null = all services)
  applicableServiceIds String[] @map("applicable_service_ids") @default([])
  
  // Relations
  payments Payment[]

  @@map("coupons")
  @@index([organizationId])
  @@index([code])
}